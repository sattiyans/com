---
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import WatchedCard from "@components/WatchedCard.astro";
import { WATCHED } from "@consts";
import type { WatchedItem } from "@types";

// Initial mock data for SSR
const initialData: WatchedItem[] = [
  {
    id: "mock-1",
    title: "Loading...",
    year: 2024,
    type: "film",
    platform: "letterboxd",
    watchedDate: new Date(),
  },
];

export const prerender = false;
---

<PageLayout title={WATCHED.TITLE} description={WATCHED.DESCRIPTION}>
  <Container>
    <div class="space-y-8">
      <!-- Header -->
      <div class="space-y-4">
        <h1 class="animate font-semibold text-black dark:text-white text-2xl">
          Recently Watched
        </h1>
        <p class="text-gray-600 dark:text-gray-400">
          A collection of films I've recently watched. Follow me on
          <a href="https://letterboxd.com/sattiyans" class="text-blue-600 dark:text-blue-400 hover:underline" target="_blank" rel="noopener noreferrer">Letterboxd</a>.
        </p>
      </div>

      <!-- Grid of Watched Items -->
      <div id="watched-grid" class="grid grid-cols-2 md:grid-cols-3 gap-4">
        {initialData.map((item) => (
          <WatchedCard item={item} />
        ))}
      </div>
    </div>
  </Container>
</PageLayout>

<script is:inline>
  // Client-side data fetching
  async function loadRealData() {
    console.log('🎬 Loading real data from Letterboxd...');

    try {
      // Fetch data from Letterboxd API only
      const letterboxdResponse = await fetch('/api/letterboxd');

      if (letterboxdResponse.ok) {
        const letterboxdData = await letterboxdResponse.json();
        console.log('✅ Letterboxd data received:', letterboxdData.length, 'items');

        if (letterboxdData && Array.isArray(letterboxdData)) {
          const itemsWithDates = letterboxdData.map((item) => ({
            ...item,
            watchedDate: new Date(item.watchedDate)
          }));
          
          // Sort by watched date (latest first) and take top 12
          const sortedItems = itemsWithDates.sort((a, b) =>
            b.watchedDate.getTime() - a.watchedDate.getTime()
          ).slice(0, 12);

          console.log('🎯 Final items:', sortedItems.length);
          console.log('📅 First item:', sortedItems[0]);

          // Update the grid with real data
          updateGrid(sortedItems);
        }
      } else {
        console.error('❌ Letterboxd API response not ok:', letterboxdResponse.status);
      }

    } catch (error) {
      console.error('💥 Error loading real data:', error);
    }
  }

  function updateGrid(items) {
    console.log('Updating grid with', items.length, 'items');
    const grid = document.getElementById('watched-grid');
    if (!grid) {
      console.error('Grid element not found');
      return;
    }

    grid.innerHTML = items.map(item => `
      <div class="group relative bg-white dark:bg-gray-900 rounded-xl overflow-hidden shadow-sm hover:shadow-lg transition-all duration-300 hover:scale-[1.02] border border-gray-200 dark:border-gray-700">
        <!-- Poster Container -->
        <div class="relative aspect-[2/3] overflow-hidden">
          ${item.posterUrl ?
            `<img src="${item.posterUrl}" alt="Poster for ${item.title}" class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105" loading="lazy" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
             <div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 flex flex-col items-center justify-center" style="display: none;">
               <span class="text-4xl mb-2 opacity-60">🎬</span>
               <span class="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide">Film</span>
             </div>` :
            `<div class="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 flex flex-col items-center justify-center">
               <span class="text-4xl mb-2 opacity-60">🎬</span>
               <span class="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide">Film</span>
             </div>`
          }
        </div>

        <!-- Content Section -->
        <div class="p-4">
          <!-- Title - Full width, proper truncation -->
          <h3 class="font-semibold text-gray-900 dark:text-white text-sm leading-tight mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-2">
            ${item.title}
          </h3>

          <!-- Rating - Below title, left aligned -->
          ${item.rating ? `
            <div class="mb-3">
              <div class="inline-flex">
                <span class="text-xs font-bold text-yellow-500">${formatRating(item.rating)}</span>
              </div>
            </div>
          ` : ''}

          <!-- Meta Info - Clean layout -->
          <div class="flex items-center justify-between text-xs">
            <span class="text-gray-600 dark:text-gray-400 font-medium">
              ${item.year}
            </span>
            <span class="text-gray-500 dark:text-gray-500">
              ${new Intl.DateTimeFormat('en-US', {
                month: 'short',
                day: 'numeric'
              }).format(new Date(item.watchedDate))}
            </span>
          </div>
        </div>

        <!-- Hover Overlay -->
        <div class="absolute inset-0 bg-black/0 group-hover:bg-black/5 dark:group-hover:bg-white/5 transition-colors duration-300 rounded-xl pointer-events-none"></div>

        ${item.url ? `<a href="${item.url}" target="_blank" rel="noopener noreferrer" class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200" aria-label="View ${item.title} on Letterboxd"><span class="sr-only">View on Letterboxd</span></a>` : ''}
      </div>
    `).join('');

    console.log('Grid updated successfully');
  }

  function formatRating(rating) {
    if (rating === 0.5) return '½';
    if (rating === 1) return '★';
    if (rating === 1.5) return '★½';
    if (rating === 2) return '★★';
    if (rating === 2.5) return '★★½';
    if (rating === 3) return '★★★';
    if (rating === 3.5) return '★★★½';
    if (rating === 4) return '★★★★';
    if (rating === 4.5) return '★★★★½';
    if (rating === 5) return '★★★★★';
    return '';
  }

  // Load real data when page loads
  console.log('🚀 Page loaded, starting data fetch...');
  loadRealData();
</script> 