---
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import { WATCHED } from "@consts";
import type { WatchedItem } from "@types";


export const prerender = false;
---

<PageLayout title={WATCHED.TITLE} description={WATCHED.DESCRIPTION}>
  <Container>
    <div class="space-y-8">
      <!-- Breadcrumb -->
      <nav class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
        <a 
          href="/"
          class="hover:text-black dark:hover:text-white transition-colors duration-200"
        >
          Home
        </a>
        <span>/</span>
        <span class="text-black dark:text-white font-medium">Recently Watched</span>
      </nav>

      <!-- Header -->
      <div class="space-y-4">
        <h1 class="animate font-semibold text-black dark:text-white text-2xl">
          Recently Watched
        </h1>
        <p class="text-gray-600 dark:text-gray-400">
          A collection of films I've recently watched. Follow me on
          <a href="https://letterboxd.com/sattiyans" class="text-blue-600 dark:text-blue-400 hover:underline" target="_blank" rel="noopener noreferrer">Letterboxd</a>.
        </p>
      </div>


      <!-- Grid of Watched Items -->
      <div id="watched-grid" class="space-y-4">
        <!-- Loading skeleton cards -->
        <div class="animate-pulse">
          <div class="flex items-center gap-3 p-3 border border-black/15 dark:border-white/20 rounded-lg">
            <div class="w-12 h-16 bg-gray-200 dark:bg-gray-700 rounded flex-shrink-0"></div>
            <div class="flex-1">
              <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
                </div>
                <div class="flex items-center gap-2">
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-3"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="flex items-center gap-3 p-3 border border-black/15 dark:border-white/20 rounded-lg">
            <div class="w-12 h-16 bg-gray-200 dark:bg-gray-700 rounded flex-shrink-0"></div>
            <div class="flex-1">
              <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
                </div>
                <div class="flex items-center gap-2">
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-3"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="flex items-center gap-3 p-3 border border-black/15 dark:border-white/20 rounded-lg">
            <div class="w-12 h-16 bg-gray-200 dark:bg-gray-700 rounded flex-shrink-0"></div>
            <div class="flex-1">
              <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
                </div>
                <div class="flex items-center gap-2">
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
                  <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-3"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </Container>
</PageLayout>

<script is:inline>
  // Client-side data fetching
  async function loadRealData() {
    console.log('🎬 Loading real data from Letterboxd...');

    try {
      // Fetch data from Letterboxd API with aggressive cache busting
      const cacheBuster = `?t=${Date.now()}&r=${Math.random()}`;
      const letterboxdResponse = await fetch(`/api/letterboxd${cacheBuster}`, {
        method: 'GET',
        cache: 'no-store',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });

      if (letterboxdResponse.ok) {
        const letterboxdData = await letterboxdResponse.json();
        console.log('✅ Letterboxd data received:', letterboxdData.length, 'items');

        if (letterboxdData && Array.isArray(letterboxdData)) {
          const itemsWithDates = letterboxdData.map((item) => ({
            ...item,
            watchedDate: new Date(item.watchedDate)
          }));
          
          // Sort by watched date (latest first) and take top 10
          const sortedItems = itemsWithDates.sort((a, b) =>
            b.watchedDate.getTime() - a.watchedDate.getTime()
          ).slice(0, 10);

          console.log('🎯 Final items:', sortedItems.length);
          console.log('📅 First item:', sortedItems[0]);

          // Update the grid with real data
          updateGrid(sortedItems);
        }
      } else {
        console.error('❌ Letterboxd API response not ok:', letterboxdResponse.status);
      }

    } catch (error) {
      console.error('💥 Error loading real data:', error);
    }
  }

  function updateGrid(items) {
    console.log('Updating grid with', items.length, 'items');
    const grid = document.getElementById('watched-grid');
    if (!grid) {
      console.error('Grid element not found');
      return;
    }

    grid.innerHTML = items.map(item => `
      <div class="group">
        <a href="${item.url || '#'}" target="_blank" rel="noopener noreferrer" class="block">
          <div class="flex items-center gap-3 p-3 border border-black/15 dark:border-white/20 rounded-lg hover:bg-black/5 dark:hover:bg-white/5 transition-colors duration-300">
            <!-- Poster -->
            <div class="w-12 h-16 flex-shrink-0 overflow-hidden rounded">
              ${item.posterUrl ?
                `<img src="${item.posterUrl}" alt="Poster for ${item.title}" class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105" loading="lazy" />` :
                `<div class="flex h-full w-full items-center justify-center bg-gray-200 dark:bg-gray-800 rounded">
                   <span class="text-xs text-gray-500 dark:text-gray-400">No poster</span>
                 </div>`
              }
            </div>
            
            <!-- Content -->
            <div class="flex-1 min-w-0">
              <h3 class="text-sm font-medium text-black dark:text-white truncate mb-1">
                ${item.title}
              </h3>
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <span class="text-xs text-gray-600 dark:text-gray-400">
                    ${item.year}
                  </span>
                  ${item.rating ? `
                    <span class="text-xs text-yellow-500 font-medium">
                      ${formatRating(item.rating)}
                    </span>
                  ` : ''}
                </div>
                <div class="flex items-center gap-2">
                  <span class="text-xs text-gray-500 dark:text-gray-400">
                    ${new Intl.DateTimeFormat('en-US', {
                      month: 'short',
                      day: 'numeric'
                    }).format(new Date(item.watchedDate))}
                  </span>
                  <svg class="w-3 h-3 text-gray-400 group-hover:text-black dark:group-hover:text-white transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </a>
      </div>
    `).join('');

    console.log('Grid updated successfully');
  }



  function formatRating(rating) {
    if (typeof rating !== 'number') return '';
    
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    
    let stars = '';
    for (let i = 0; i < fullStars; i++) {
      stars += '★';
    }
    if (hasHalfStar) {
      stars += '½';
    }
    
    return stars;
  }

  // Load real data when page loads
  console.log('🚀 Page loaded, starting data fetch...');
  loadRealData();
</script> 