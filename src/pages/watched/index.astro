---
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import WatchedCard from "@components/WatchedCard.astro";
import { WATCHED } from "@consts";
import type { WatchedItem } from "@types";

// Initial mock data for SSR
const initialData: WatchedItem[] = [
  {
    id: "mock-1",
    title: "Loading...",
    year: 2024,
    type: "film",
    platform: "letterboxd",
    watchedDate: new Date(),
  },
];

export const prerender = false;
---

<PageLayout title={WATCHED.TITLE} description={WATCHED.DESCRIPTION}>
  <Container>
    <div class="space-y-8">
      <!-- Header -->
      <div class="space-y-4">
        <h1 class="animate font-semibold text-black dark:text-white text-2xl">
          Recently Watched
        </h1>
        <p class="text-gray-600 dark:text-gray-400">
          A collection of films I've recently watched. Follow me on
          <a href="https://letterboxd.com/sattiyans" class="text-blue-600 dark:text-blue-400 hover:underline" target="_blank" rel="noopener noreferrer">Letterboxd</a>.
        </p>
      </div>

      <!-- Grid of Watched Items -->
      <div id="watched-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
        <!-- Loading skeleton cards -->
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="aspect-[2/3] bg-gray-200 dark:bg-gray-700 rounded-lg mb-3"></div>
          <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2"></div>
          <div class="flex justify-between">
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-12"></div>
          </div>
        </div>
      </div>
    </div>
  </Container>
</PageLayout>

<script is:inline>
  // Client-side data fetching
  async function loadRealData() {
    console.log('🎬 Loading real data from Letterboxd...');

    try {
      // Fetch data from Letterboxd API only
      const letterboxdResponse = await fetch('/api/letterboxd');

      if (letterboxdResponse.ok) {
        const letterboxdData = await letterboxdResponse.json();
        console.log('✅ Letterboxd data received:', letterboxdData.length, 'items');

        if (letterboxdData && Array.isArray(letterboxdData)) {
          const itemsWithDates = letterboxdData.map((item) => ({
            ...item,
            watchedDate: new Date(item.watchedDate)
          }));
          
          // Sort by watched date (latest first) and take top 12
          const sortedItems = itemsWithDates.sort((a, b) =>
            b.watchedDate.getTime() - a.watchedDate.getTime()
          ).slice(0, 12);

          console.log('🎯 Final items:', sortedItems.length);
          console.log('📅 First item:', sortedItems[0]);

          // Update the grid with real data
          updateGrid(sortedItems);
        }
      } else {
        console.error('❌ Letterboxd API response not ok:', letterboxdResponse.status);
      }

    } catch (error) {
      console.error('💥 Error loading real data:', error);
    }
  }

  function updateGrid(items) {
    console.log('Updating grid with', items.length, 'items');
    const grid = document.getElementById('watched-grid');
    if (!grid) {
      console.error('Grid element not found');
      return;
    }

    grid.innerHTML = items.map(item => `
      <div class="group relative">
        <a href="${item.url || '#'}" target="_blank" rel="noopener noreferrer" class="block">
          <div class="relative overflow-hidden rounded-lg border border-black/15 bg-white dark:border-white/15 dark:bg-white/5">
            <!-- Poster -->
            <div class="aspect-[2/3] overflow-hidden">
              ${item.posterUrl ?
                `<img src="${item.posterUrl}" alt="Poster for ${item.title}" class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105" loading="lazy" />` :
                `<div class="flex h-full w-full items-center justify-center bg-gray-200 dark:bg-gray-800">
                   <span class="text-sm text-gray-500 dark:text-gray-400">No poster</span>
                 </div>`
              }
            </div>
            
            <!-- Content -->
            <div class="p-3">
              <h3 class="min-w-0 text-sm font-medium text-gray-900 dark:text-gray-100">
                ${item.title}
              </h3>
              ${item.rating ? `
                <div class="mt-1">
                  <span class="text-xs text-yellow-500 font-medium">
                    ${formatRating(item.rating)}
                  </span>
                </div>
              ` : ''}
              <div class="mt-1 flex items-center justify-between text-xs text-gray-600 dark:text-gray-400">
                <span>${item.year}</span>
                <span>${new Intl.DateTimeFormat('en-US', {
                  month: 'short',
                  day: 'numeric'
                }).format(new Date(item.watchedDate))}</span>
              </div>
            </div>
          </div>
        </a>
      </div>
    `).join('');

    console.log('Grid updated successfully');
  }



  function formatRating(rating) {
    if (rating === 0.5) return '½';
    if (rating === 1) return '★';
    if (rating === 1.5) return '★½';
    if (rating === 2) return '★★';
    if (rating === 2.5) return '★★½';
    if (rating === 3) return '★★★';
    if (rating === 3.5) return '★★★½';
    if (rating === 4) return '★★★★';
    if (rating === 4.5) return '★★★★½';
    if (rating === 5) return '★★★★★';
    return '';
  }

  // Load real data when page loads
  console.log('🚀 Page loaded, starting data fetch...');
  loadRealData();
</script> 