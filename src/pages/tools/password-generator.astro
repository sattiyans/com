---
import Container from "@components/Container.astro";
import PageLayout from "@layouts/PageLayout.astro";
import Link from "@components/Link.astro";
import Head from "@components/Head.astro";

const seoData = {
  title: "Password Generator - Free Secure Random Password Creator | Sattiyan Selvarajah",
  description: "Free online password generator tool. Create secure, random passwords with customizable length and character sets. Generate strong passwords for your accounts and applications.",
  keywords: "password generator, secure password, random password, password creator, strong password, password tool, security tools, password strength",
  canonical: "https://sattiyans.com/tools/password-generator"
};
---

<PageLayout title={seoData.title} description={seoData.description}>
  <Head title={seoData.title} description={seoData.description}>
    <meta name="keywords" content={seoData.keywords} />
    <link rel="canonical" href={seoData.canonical} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={seoData.canonical} />
    <meta property="og:title" content={seoData.title} />
    <meta property="og:description" content={seoData.description} />
    <meta property="og:image" content="https://sattiyans.com/og-password-generator.png" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={seoData.canonical} />
    <meta property="twitter:title" content={seoData.title} />
    <meta property="twitter:description" content={seoData.description} />
    <meta property="twitter:image" content="https://sattiyans.com/og-password-generator.png" />
    
    <!-- JSON-LD Structured Data -->
    <script type="application/ld+json" is:inline>
      {
        "@context": "https://schema.org",
        "@type": "SoftwareApplication",
        "name": "Password Generator",
        "description": "Free online tool to generate secure, random passwords with customizable options",
        "url": "https://sattiyans.com/tools/password-generator",
        "applicationCategory": "SecurityApplication",
        "operatingSystem": "Web Browser",
        "offers": {
          "@type": "Offer",
          "price": "0",
          "priceCurrency": "USD"
        },
        "author": {
          "@type": "Person",
          "name": "Sattiyan Selvarajah",
          "url": "https://sattiyans.com"
        },
        "featureList": [
          "Customizable password length",
          "Character set selection",
          "Password strength indicator",
          "Multiple password generation",
          "Copy to clipboard",
          "Exclude similar characters",
          "Exclude ambiguous characters"
        ]
      }
    </script>
  </Head>
  <Container>
    <div class="space-y-12">
      <!-- Breadcrumb -->
      <section>
        <nav class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
          <Link 
            href="/"
            class="hover:text-black dark:hover:text-white transition-colors duration-200"
          >
            Home
          </Link>
          <span>/</span>
          <Link 
            href="/tools"
            class="hover:text-black dark:hover:text-white transition-colors duration-200"
          >
            Tools
          </Link>
          <span>/</span>
          <span class="text-black dark:text-white font-medium">Password Generator</span>
        </nav>
      </section>

      <!-- Header -->
      <section>
        <div class="flex items-center gap-3 mb-3">
          <span class="text-2xl">üîê</span>
          <h1 class="text-2xl md:text-3xl font-semibold text-black dark:text-white">
            Password Generator
          </h1>
        </div>
        <p class="text-gray-600 dark:text-gray-300 mb-6">
          Generate secure, random passwords with customizable options. Create strong passwords for your accounts and applications.
        </p>
      </section>

      <!-- Tool Interface -->
      <section>
        <div class="border border-black/10 dark:border-white/10 rounded-lg p-6">
          <div class="space-y-6">
            <!-- Password Output -->
            <div>
              <label for="password-output" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Generated Password
              </label>
              <div class="flex gap-2">
                <input
                  type="text"
                  id="password-output"
                  readonly
                  placeholder="Your password will appear here..."
                  class="flex-1 px-3 py-2 border border-black/15 dark:border-white/20 rounded-md bg-gray-50 dark:bg-gray-800 text-black dark:text-white placeholder-gray-500 dark:placeholder-gray-400 font-mono"
                />
                <button
                  id="copy-password"
                  class="px-4 py-2 bg-blue-600 text-white rounded-md font-medium hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled
                >
                  Copy
                </button>
              </div>
            </div>

            <!-- Password Options -->
            <div class="space-y-4">
              <!-- Length -->
              <div>
                <label for="password-length" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Length: <span id="length-value">16</span> characters
                </label>
                <input
                  type="range"
                  id="password-length"
                  min="4"
                  max="128"
                  value="16"
                  class="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer"
                />
                <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
                  <span>4</span>
                  <span>128</span>
                </div>
              </div>

              <!-- Character Sets -->
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                  Character Sets
                </label>
                <div class="space-y-2">
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      id="include-uppercase"
                      checked
                      class="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span class="text-sm text-gray-700 dark:text-gray-300">Uppercase letters (A-Z)</span>
                  </label>
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      id="include-lowercase"
                      checked
                      class="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span class="text-sm text-gray-700 dark:text-gray-300">Lowercase letters (a-z)</span>
                  </label>
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      id="include-numbers"
                      checked
                      class="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span class="text-sm text-gray-700 dark:text-gray-300">Numbers (0-9)</span>
                  </label>
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      id="include-symbols"
                      checked
                      class="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span class="text-sm text-gray-700 dark:text-gray-300">Symbols (!@#$%^&*)</span>
                  </label>
                </div>
              </div>

              <!-- Additional Options -->
              <div class="space-y-2">
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    id="exclude-similar"
                    class="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Exclude similar characters (0, O, l, 1, I)</span>
                </label>
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    id="exclude-ambiguous"
                    class="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Exclude ambiguous characters (&#123; &#125; &#91; &#93; &#40; &#41; &#92; &#47; &#126; &#44; &#59; &#58; &#46; &#60; &#62;)</span>
                </label>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex gap-3">
              <button
                id="generate-password"
                class="px-6 py-2 bg-black dark:bg-white text-white dark:text-black rounded-md font-medium hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors duration-200"
              >
                Generate Password
              </button>
              <button
                id="generate-multiple"
                class="px-6 py-2 bg-gray-600 dark:bg-gray-400 text-white dark:text-black rounded-md font-medium hover:bg-gray-700 dark:hover:bg-gray-300 transition-colors duration-200"
              >
                Generate 5 Passwords
              </button>
            </div>

            <!-- Multiple Passwords -->
            <div id="multiple-passwords" class="hidden">
              <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Multiple Passwords</h3>
              <div id="password-list" class="space-y-2">
                <!-- Multiple passwords will be inserted here -->
              </div>
            </div>

            <!-- Password Strength -->
            <div id="password-strength" class="hidden">
              <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Password Strength</h3>
              <div class="space-y-2">
                <div class="flex items-center gap-2">
                  <div class="flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                    <div id="strength-bar" class="h-2 rounded-full transition-all duration-300"></div>
                  </div>
                  <span id="strength-text" class="text-sm font-medium">Weak</span>
                </div>
                <div id="strength-feedback" class="text-xs text-gray-600 dark:text-gray-400">
                  <!-- Strength feedback will be inserted here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Info Section -->
      <section>
        <div class="border border-black/10 dark:border-white/10 rounded-lg p-6">
          <h2 class="text-lg font-medium text-black dark:text-white mb-3">
            Password Security Tips
          </h2>
          <div class="text-sm text-gray-600 dark:text-gray-300 space-y-2">
            <p><strong>Length:</strong> Use at least 12-16 characters for better security</p>
            <p><strong>Complexity:</strong> Include uppercase, lowercase, numbers, and symbols</p>
            <p><strong>Uniqueness:</strong> Use different passwords for each account</p>
            <p><strong>Storage:</strong> Consider using a password manager for secure storage</p>
            <p><strong>Regular Updates:</strong> Change passwords periodically, especially for sensitive accounts</p>
          </div>
        </div>
      </section>
    </div>
  </Container>

  <script>
    function initPasswordGenerator() {
      const passwordOutput = document.getElementById('password-output');
      const copyPassword = document.getElementById('copy-password');
      const passwordLength = document.getElementById('password-length') as HTMLInputElement | null;
      const lengthValue = document.getElementById('length-value') as HTMLElement | null;
      const includeUppercase = document.getElementById('include-uppercase') as HTMLInputElement | null;
      const includeLowercase = document.getElementById('include-lowercase') as HTMLInputElement | null;
      const includeNumbers = document.getElementById('include-numbers') as HTMLInputElement | null;
      const includeSymbols = document.getElementById('include-symbols') as HTMLInputElement | null;
      const excludeSimilar = document.getElementById('exclude-similar') as HTMLInputElement | null;
      const excludeAmbiguous = document.getElementById('exclude-ambiguous') as HTMLInputElement | null;
      const generatePassword = document.getElementById('generate-password') as HTMLButtonElement | null;
      const generateMultiple = document.getElementById('generate-multiple') as HTMLButtonElement | null;
      const multiplePasswords = document.getElementById('multiple-passwords') as HTMLElement | null;
      const passwordList = document.getElementById('password-list') as HTMLElement | null;
      const passwordStrength = document.getElementById('password-strength') as HTMLElement | null;
      const strengthBar = document.getElementById('strength-bar') as HTMLElement | null;
      const strengthText = document.getElementById('strength-text') as HTMLElement | null;
      const strengthFeedback = document.getElementById('strength-feedback') as HTMLElement | null;

      if (!passwordLength || !lengthValue || !includeUppercase || !includeLowercase || !includeNumbers || !includeSymbols || !excludeSimilar || !excludeAmbiguous || !generatePassword || !generateMultiple || !multiplePasswords || !passwordList || !passwordStrength || !strengthBar || !strengthText || !strengthFeedback) {
        console.error('Password generator elements not found');
        return;
      }

    const characterSets = {
      uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
      lowercase: 'abcdefghijklmnopqrstuvwxyz',
      numbers: '0123456789',
      symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?'
    };

    const similarChars = '0O1lI';
    const ambiguousChars = '{}[]()\\/~,;:.<>';

    function updateLengthDisplay() {
      if (lengthValue && passwordLength) {
        lengthValue.textContent = passwordLength.value;
      }
    }

    function getCharacterSet() {
      let charset = '';
      
      if (includeUppercase && includeUppercase.checked) {
        charset += characterSets.uppercase;
      }
      if (includeLowercase && includeLowercase.checked) {
        charset += characterSets.lowercase;
      }
      if (includeNumbers && includeNumbers.checked) {
        charset += characterSets.numbers;
      }
      if (includeSymbols && includeSymbols.checked) {
        charset += characterSets.symbols;
      }

      if (excludeSimilar && excludeSimilar.checked) {
        charset = charset.split('').filter(char => !similarChars.includes(char)).join('');
      }
      if (excludeAmbiguous && excludeAmbiguous.checked) {
        charset = charset.split('').filter(char => !ambiguousChars.includes(char)).join('');
      }

      return charset;
    }

    function generateRandomPassword(length: number) {
      const charset = getCharacterSet();
      if (charset.length === 0) {
        throw new Error('At least one character set must be selected');
      }

      let password = '';
      for (let i = 0; i < length; i++) {
        password += charset.charAt(Math.floor(Math.random() * charset.length));
      }
      return password;
    }

    function calculatePasswordStrength(password: string) {
      let score = 0;
      let feedback = [];

      // Length scoring
      if (password.length >= 8) score += 1;
      if (password.length >= 12) score += 1;
      if (password.length >= 16) score += 1;
      if (password.length >= 20) score += 1;

      // Character variety
      if (/[a-z]/.test(password)) score += 1;
      if (/[A-Z]/.test(password)) score += 1;
      if (/[0-9]/.test(password)) score += 1;
      if (/[^a-zA-Z0-9]/.test(password)) score += 1;

      // Additional checks
      if (password.length < 8) feedback.push('Use at least 8 characters');
      if (!/[a-z]/.test(password)) feedback.push('Add lowercase letters');
      if (!/[A-Z]/.test(password)) feedback.push('Add uppercase letters');
      if (!/[0-9]/.test(password)) feedback.push('Add numbers');
      if (!/[^a-zA-Z0-9]/.test(password)) feedback.push('Add symbols');

      return { score, feedback };
    }

    function updatePasswordStrength(password: string) {
      if (!password || !strengthBar || !strengthText || !strengthFeedback || !passwordStrength) {
        if (passwordStrength) {
          passwordStrength.classList.add('hidden');
        }
        return;
      }

      const { score, feedback } = calculatePasswordStrength(password);
      
      let strength = 'Very Weak';
      let color = 'bg-red-500';
      
      if (score >= 8) {
        strength = 'Very Strong';
        color = 'bg-green-500';
      } else if (score >= 6) {
        strength = 'Strong';
        color = 'bg-green-400';
      } else if (score >= 4) {
        strength = 'Medium';
        color = 'bg-yellow-500';
      } else if (score >= 2) {
        strength = 'Weak';
        color = 'bg-orange-500';
      }

      strengthBar.className = `h-2 rounded-full transition-all duration-300 ${color}`;
      strengthBar.style.width = `${Math.min((score / 8) * 100, 100)}%`;
      strengthText.textContent = strength;
      strengthFeedback.innerHTML = feedback.length > 0 ? feedback.join(', ') : 'Good password!';
      
      passwordStrength.classList.remove('hidden');
    }

    function updateCopyButton() {
      if (!passwordOutput || !copyPassword) return;
      const hasPassword = (passwordOutput as HTMLInputElement).value.trim() !== '';
      (copyPassword as HTMLButtonElement).disabled = !hasPassword;
    }

    function copyToClipboard() {
      if (!passwordOutput || !copyPassword) return;
      navigator.clipboard.writeText((passwordOutput as HTMLInputElement).value).then(() => {
        copyPassword.textContent = 'Copied!';
        setTimeout(() => {
          copyPassword.textContent = 'Copy';
        }, 2000);
      });
    }

    function generateSinglePassword() {
      if (!passwordLength || !passwordOutput || !multiplePasswords) return;
      try {
        const length = parseInt(passwordLength.value);
        const password = generateRandomPassword(length);
        (passwordOutput as HTMLInputElement).value = password;
        updateCopyButton();
        updatePasswordStrength(password);
        multiplePasswords.classList.add('hidden');
      } catch (error) {
        alert((error as Error).message);
      }
    }

    function generateMultiplePasswords() {
      if (!passwordLength || !passwordList || !multiplePasswords) return;
      try {
        const length = parseInt(passwordLength.value);
        const passwords = [];
        
        for (let i = 0; i < 5; i++) {
          passwords.push(generateRandomPassword(length));
        }

        passwordList.innerHTML = '';
        passwords.forEach((password, index) => {
          const div = document.createElement('div');
          div.className = 'flex items-center gap-2 p-2 bg-gray-50 dark:bg-gray-800 rounded-md';
          div.innerHTML = `
            <span class="text-sm text-gray-500 dark:text-gray-400 w-6">${index + 1}.</span>
            <input type="text" value="${password}" readonly class="flex-1 px-2 py-1 text-sm font-mono bg-transparent border-none text-black dark:text-white" />
            <button class="copy-multiple-btn px-2 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors duration-200" data-password="${password}">
              Copy
            </button>
          `;
          passwordList.appendChild(div);
        });

        multiplePasswords.classList.remove('hidden');
      } catch (error) {
        alert((error as Error).message);
      }
    }

    // Event listeners
    if (passwordLength) passwordLength.addEventListener('input', updateLengthDisplay);
    if (generatePassword) generatePassword.addEventListener('click', generateSinglePassword);
    if (generateMultiple) generateMultiple.addEventListener('click', generateMultiplePasswords);
    if (copyPassword) copyPassword.addEventListener('click', copyToClipboard);

    // Copy buttons for multiple passwords
    if (passwordList) {
      passwordList.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target && target.classList.contains('copy-multiple-btn')) {
          const password = target.dataset.password;
          if (password) {
            navigator.clipboard.writeText(password).then(() => {
              target.textContent = 'Copied!';
              setTimeout(() => {
                target.textContent = 'Copy';
              }, 2000);
            });
          }
        }
      });
    }

    // Generate password on Enter key
    if (passwordOutput) {
      passwordOutput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          generateSinglePassword();
        }
      });
    }

      // Initialize
      updateLengthDisplay();
      updateCopyButton();
      generateSinglePassword();
    }

    // Initialize the password generator when DOM is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initPasswordGenerator);
    } else {
      initPasswordGenerator();
    }
  </script>
</PageLayout>
