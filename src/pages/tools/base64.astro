---
import Container from "@components/Container.astro";
import PageLayout from "@layouts/PageLayout.astro";
import Link from "@components/Link.astro";
import Head from "@components/Head.astro";

const seoData = {
  title: "Base64 Encoder/Decoder - Free Online Text Conversion Tool | Sattiyan Selvarajah",
  description: "Free online Base64 encoder and decoder tool. Convert text to Base64 encoding or decode Base64 back to text. Simple, fast, and secure text conversion utility for developers.",
  keywords: "base64 encoder, base64 decoder, base64 converter, text encoding, base64 online, free base64 tool, developer tools, text conversion",
  canonical: "https://sattiyans.com/tools/base64"
};
---

<PageLayout title={seoData.title} description={seoData.description}>
  <Head title={seoData.title} description={seoData.description}>
    <meta name="keywords" content={seoData.keywords} />
    <link rel="canonical" href={seoData.canonical} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={seoData.canonical} />
    <meta property="og:title" content={seoData.title} />
    <meta property="og:description" content={seoData.description} />
    <meta property="og:image" content="https://sattiyans.com/og-base64.png" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={seoData.canonical} />
    <meta property="twitter:title" content={seoData.title} />
    <meta property="twitter:description" content={seoData.description} />
    <meta property="twitter:image" content="https://sattiyans.com/og-base64.png" />
    
    <!-- JSON-LD Structured Data -->
    <script type="application/ld+json" is:inline>
      {
        "@context": "https://schema.org",
        "@type": "SoftwareApplication",
        "name": "Base64 Encoder/Decoder",
        "description": "Free online tool to encode and decode text to/from Base64 format",
        "url": "https://sattiyans.com/tools/base64",
        "applicationCategory": "DeveloperApplication",
        "operatingSystem": "Web Browser",
        "offers": {
          "@type": "Offer",
          "price": "0",
          "priceCurrency": "USD"
        },
        "author": {
          "@type": "Person",
          "name": "Sattiyan Selvarajah",
          "url": "https://sattiyans.com"
        },
        "featureList": [
          "Encode text to Base64",
          "Decode Base64 to text", 
          "Copy to clipboard",
          "Real-time conversion",
          "Secure local processing"
        ]
      }
    </script>
  </Head>
  <Container>
    <div class="space-y-12">
      <!-- Breadcrumb -->
      <section>
        <nav class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
          <Link 
            href="/"
            class="hover:text-black dark:hover:text-white transition-colors duration-200"
          >
            Home
          </Link>
          <span>/</span>
          <Link 
            href="/tools"
            class="hover:text-black dark:hover:text-white transition-colors duration-200"
          >
            Tools
          </Link>
          <span>/</span>
          <span class="text-black dark:text-white font-medium">Base64 Encoder/Decoder</span>
        </nav>
      </section>

      <!-- Header -->
      <section>
        <div class="flex items-center gap-3 mb-3">
          <span class="text-2xl">ðŸ”¤</span>
          <h1 class="text-2xl md:text-3xl font-semibold text-black dark:text-white">
            Base64 Encoder/Decoder
          </h1>
        </div>
        <p class="text-gray-600 dark:text-gray-300 mb-6">
          Convert text to Base64 encoding or decode Base64 back to text. Simple, fast, and secure text conversion tool.
        </p>
      </section>

      <!-- Tool Interface -->
      <section>
        <div class="border border-black/10 dark:border-white/10 rounded-lg p-6">
          <div class="space-y-6">
            <!-- Input Section -->
            <div>
              <label for="input-text" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Input Text
              </label>
              <textarea
                id="input-text"
                rows="6"
                placeholder="Enter text to encode or Base64 to decode..."
                class="w-full px-3 py-2 border border-black/15 dark:border-white/20 rounded-md focus:ring-2 focus:ring-black dark:focus:ring-white focus:border-transparent bg-white dark:bg-gray-900 text-black dark:text-white placeholder-gray-500 dark:placeholder-gray-400 resize-none"
              ></textarea>
            </div>

            <!-- Action Buttons -->
            <div class="flex gap-3">
              <button
                id="encode-btn"
                class="px-4 py-2 bg-black dark:bg-white text-white dark:text-black rounded-md font-medium hover:bg-gray-800 dark:hover:bg-gray-200 transition-colors duration-200"
              >
                Encode to Base64
              </button>
              <button
                id="decode-btn"
                class="px-4 py-2 bg-gray-600 dark:bg-gray-400 text-white dark:text-black rounded-md font-medium hover:bg-gray-700 dark:hover:bg-gray-300 transition-colors duration-200"
              >
                Decode from Base64
              </button>
              <button
                id="clear-btn"
                class="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-md font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200"
              >
                Clear
              </button>
            </div>

            <!-- Output Section -->
            <div>
              <label for="output-text" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Output
              </label>
              <textarea
                id="output-text"
                rows="6"
                placeholder="Converted text will appear here..."
                readonly
                class="w-full px-3 py-2 border border-black/15 dark:border-white/20 rounded-md bg-gray-50 dark:bg-gray-800 text-black dark:text-white placeholder-gray-500 dark:placeholder-gray-400 resize-none"
              ></textarea>
            </div>

            <!-- Copy Button -->
            <div class="flex justify-end">
              <button
                id="copy-btn"
                class="px-4 py-2 bg-blue-600 text-white rounded-md font-medium hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
              >
                Copy to Clipboard
              </button>
            </div>
          </div>
        </div>
      </section>

      <!-- Info Section -->
      <section>
        <div class="border border-black/10 dark:border-white/10 rounded-lg p-6">
          <h2 class="text-lg font-medium text-black dark:text-white mb-3">
            About Base64
          </h2>
          <div class="text-sm text-gray-600 dark:text-gray-300 space-y-2">
            <p>
              Base64 is a binary-to-text encoding scheme that represents binary data in an ASCII string format. 
              It's commonly used for encoding data in URLs, email attachments, and data storage.
            </p>
            <p>
              <strong>Common uses:</strong> Email attachments, data URLs, storing binary data in JSON, encoding passwords.
            </p>
          </div>
        </div>
      </section>
    </div>
  </Container>

  <script>
    function initBase64Tool() {
      const inputText = document.getElementById('input-text') as HTMLTextAreaElement | null;
      const outputText = document.getElementById('output-text') as HTMLTextAreaElement | null;
      const encodeBtn = document.getElementById('encode-btn') as HTMLButtonElement | null;
      const decodeBtn = document.getElementById('decode-btn') as HTMLButtonElement | null;
      const clearBtn = document.getElementById('clear-btn') as HTMLButtonElement | null;
      const copyBtn = document.getElementById('copy-btn') as HTMLButtonElement | null;

      if (!inputText || !outputText || !encodeBtn || !decodeBtn || !clearBtn || !copyBtn) {
        console.error('Base64 tool elements not found');
        return;
      }

      function updateCopyButton() {
        if (outputText && copyBtn) {
          const hasOutput = outputText.value.trim() !== '';
          copyBtn.disabled = !hasOutput;
          copyBtn.textContent = hasOutput ? 'Copy to Clipboard' : 'Copy to Clipboard';
        }
      }

      function showError(message: string) {
        if (outputText) {
          outputText.value = `Error: ${message}`;
          outputText.classList.add('border-red-500');
          setTimeout(() => {
            outputText.classList.remove('border-red-500');
          }, 3000);
        }
      }

      function clearError() {
        if (outputText) {
          outputText.classList.remove('border-red-500');
        }
      }

    encodeBtn.addEventListener('click', () => {
      clearError();
      const text = inputText.value.trim();
      if (!text) {
        showError('Please enter some text to encode');
        return;
      }
      
      try {
        const encoded = btoa(encodeURIComponent(text));
        outputText.value = encoded;
        updateCopyButton();
      } catch (error) {
        showError('Failed to encode text');
      }
    });

    decodeBtn.addEventListener('click', () => {
      clearError();
      const text = inputText.value.trim();
      if (!text) {
        showError('Please enter Base64 text to decode');
        return;
      }
      
      try {
        const decoded = decodeURIComponent(atob(text));
        outputText.value = decoded;
        updateCopyButton();
      } catch (error) {
        showError('Invalid Base64 format');
      }
    });

    clearBtn.addEventListener('click', () => {
      inputText.value = '';
      outputText.value = '';
      clearError();
      updateCopyButton();
    });

    copyBtn.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(outputText.value);
        copyBtn.textContent = 'Copied!';
        setTimeout(() => {
          copyBtn.textContent = 'Copy to Clipboard';
        }, 2000);
      } catch (error) {
        copyBtn.textContent = 'Failed to copy';
        setTimeout(() => {
          copyBtn.textContent = 'Copy to Clipboard';
        }, 2000);
      }
    });

    // Auto-detect and suggest action
    inputText.addEventListener('input', () => {
      const text = inputText.value.trim();
      if (!text) {
        updateCopyButton();
        return;
      }

      // Simple heuristic: if it looks like Base64, suggest decode
      const isBase64 = /^[A-Za-z0-9+/]*={0,2}$/.test(text) && text.length % 4 === 0;
      if (isBase64) {
        decodeBtn.classList.add('ring-2', 'ring-blue-500');
        encodeBtn.classList.remove('ring-2', 'ring-blue-500');
      } else {
        encodeBtn.classList.add('ring-2', 'ring-blue-500');
        decodeBtn.classList.remove('ring-2', 'ring-blue-500');
      }
    });

      // Initialize
      updateCopyButton();
    }

    // Initialize the tool when DOM is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initBase64Tool);
    } else {
      initBase64Tool();
    }
  </script>
</PageLayout>
