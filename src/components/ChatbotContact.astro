---
// Simple Floating AI Chatbot Input
---

<!-- Enhanced floating input bar -->
<div class="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50 chatbot-wrapper w-full px-4">
  <div class="chatbot-container bg-white/90 dark:bg-gray-900/90 rounded-full shadow-2xl border border-gray-200 dark:border-gray-700 max-w-lg w-full mx-auto backdrop-blur-sm hover:shadow-3xl dark:hover:shadow-3xl transition-all duration-300">
    <div class="px-6 py-4 relative">
      <div class="flex items-center gap-3">
        <!-- AI Icon -->
        <div class="ai-icon flex-shrink-0 chatbot-element">
          <svg class="w-5 h-5 text-blue-500 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
          </svg>
        </div>
        
        <!-- Input Field -->
        <input 
          type="text" 
          id="chatbot-input" 
          placeholder="What can I help you with?" 
          class="chatbot-input chatbot-element w-full bg-transparent text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none text-sm transition-all duration-300 focus:scale-105"
          style="font-size: 16px;"
        />
        
        <!-- Send Icon -->
        <div class="send-icon flex-shrink-0 opacity-0 transition-all duration-300 chatbot-element hover:text-blue-500 dark:hover:text-blue-400">
          <svg class="w-5 h-5 text-gray-400 dark:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
          </svg>
        </div>
      </div>
      
      <!-- Animated Border -->
      <div class="animated-border"></div>
    </div>
  </div>
</div>

<style>
  /* Chatbot Wrapper - Entrance Animation */
  .chatbot-wrapper {
    opacity: 0;
    transform: translateX(-50%) translateY(100px) scale(0.8);
    animation: slideInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) 0.5s forwards;
  }
  
  @keyframes slideInUp {
    0% {
      opacity: 0;
      transform: translateX(-50%) translateY(100px) scale(0.8);
    }
    60% {
      opacity: 1;
      transform: translateX(-50%) translateY(-10px) scale(1.05);
    }
    100% {
      opacity: 1;
      transform: translateX(-50%) translateY(0) scale(1);
    }
  }
  
  /* Enhanced Chatbot Container */
  .chatbot-container {
    position: relative;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .chatbot-container:hover {
    transform: translateY(-2px);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(59, 130, 246, 0.1);
  }
  
  .dark .chatbot-container:hover {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(59, 130, 246, 0.2);
  }
  
  .chatbot-container.focused {
    transform: translateY(-2px);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(59, 130, 246, 0.3);
    border-color: rgba(59, 130, 246, 0.3);
  }
  
  .dark .chatbot-container.focused {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(59, 130, 246, 0.4);
    border-color: rgba(59, 130, 246, 0.4);
  }
  
  /* AI Icon Animation */
  .ai-icon {
    animation: aiPulse 2s infinite ease-in-out;
  }
  
  @keyframes aiPulse {
    0%, 100% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.1);
      opacity: 0.8;
    }
  }
  
  /* Input Field Enhancements */
  .chatbot-input {
    position: relative;
    z-index: 2;
    font-size: 16px !important; /* Prevent zoom on mobile */
  }
  
  /* Mobile optimizations */
  @media (max-width: 640px) {
    .chatbot-wrapper {
      padding-left: 1rem;
      padding-right: 1rem;
      bottom: 1rem; /* Add bottom padding */
    }
    
    .chatbot-container {
      border-radius: 9999px; /* Restore pill shape on mobile */
      max-width: 20rem; /* Make it smaller on mobile */
    }
    
    .chatbot-input {
      font-size: 14px !important; /* Smaller font size */
      min-height: 32px; /* Even smaller height */
    }
    
    .chatbot-container .px-6 {
      padding-left: 0.75rem; /* Reduce horizontal padding */
      padding-right: 0.75rem;
    }
    
    .chatbot-container .py-4 {
      padding-top: 0.5rem; /* Reduce vertical padding */
      padding-bottom: 0.5rem;
    }
    
    .ai-icon svg {
      width: 1rem; /* Smaller icons */
      height: 1rem;
    }
    
    .send-icon svg {
      width: 1rem; /* Smaller icons */
      height: 1rem;
    }
    
    .chatbot-wrapper .gap-3 {
      gap: 0.5rem; /* Reduce gap between elements */
    }
  }
  
  .chatbot-input:focus + .send-icon {
    opacity: 1;
    transform: translateX(0);
  }
  
  .chatbot-input:not(:placeholder-shown) + .send-icon {
    opacity: 1;
    transform: translateX(0);
  }
  
  /* Send Icon Animation */
  .send-icon {
    transform: translateX(10px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .send-icon:hover {
    transform: translateX(0) scale(1.1);
  }
  
  /* Animated Border */
  .animated-border {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 2px;
    background: linear-gradient(90deg, #3b82f6, #8b5cf6, #06b6d4);
    border-radius: 1px;
    transition: width 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .dark .animated-border {
    background: linear-gradient(90deg, #60a5fa, #a78bfa, #22d3ee);
  }
  
  .chatbot-input:focus ~ .animated-border {
    width: 80%;
    animation: borderGlow 2s infinite ease-in-out;
  }
  
  .dark .chatbot-input:focus ~ .animated-border {
    animation: borderGlowDark 2s infinite ease-in-out;
  }
  
  @keyframes borderGlow {
    0%, 100% {
      box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
    }
    50% {
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.8);
    }
  }
  
  @keyframes borderGlowDark {
    0%, 100% {
      box-shadow: 0 0 5px rgba(96, 165, 250, 0.6);
    }
    50% {
      box-shadow: 0 0 20px rgba(96, 165, 250, 0.9);
    }
  }
  
  /* Staggered Element Animation */
  .chatbot-element {
    opacity: 0;
    transform: translateY(20px);
    animation: elementSlideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  .chatbot-element:nth-child(1) {
    animation-delay: 0.8s;
  }
  
  .chatbot-element:nth-child(2) {
    animation-delay: 1.0s;
  }
  
  .chatbot-element:nth-child(3) {
    animation-delay: 1.2s;
  }
  
  @keyframes elementSlideIn {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Floating Animation */
  .chatbot-container {
    animation: float 6s ease-in-out infinite;
  }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-3px);
    }
  }
  
  /* Typing Indicator */
  .typing-indicator {
    display: inline-flex;
    align-items: center;
    gap: 4px;
  }
  
  .typing-dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: #6b7280;
    animation: typing 1.4s infinite ease-in-out;
  }
  
  .typing-dot:nth-child(1) { animation-delay: -0.32s; }
  .typing-dot:nth-child(2) { animation-delay: -0.16s; }
  .typing-dot:nth-child(3) { animation-delay: 0s; }
  
  @keyframes typing {
    0%, 80%, 100% {
      transform: scale(0.8);
      opacity: 0.5;
    }
    40% {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  .message-slide-in {
    animation: slideIn 0.3s ease-out;
  }
  
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Success Animation */
  .success-animation {
    animation: successPulse 2s ease-in-out;
  }
  
  @keyframes successPulse {
    0% {
      transform: translate(-50%, 0) scale(1);
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    }
    25% {
      transform: translate(-50%, 0) scale(1.05);
      box-shadow: 0 25px 50px -12px rgba(34, 197, 94, 0.4);
    }
    50% {
      transform: translate(-50%, 0) scale(1.02);
      box-shadow: 0 25px 50px -12px rgba(34, 197, 94, 0.6);
    }
    75% {
      transform: translate(-50%, 0) scale(1.05);
      box-shadow: 0 25px 50px -12px rgba(34, 197, 94, 0.4);
    }
    100% {
      transform: translate(-50%, 0) scale(1);
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    }
  }
  
  /* Success border animation */
  .success-animation > div {
    animation: successBorder 2s ease-in-out;
  }
  
  @keyframes successBorder {
    0% {
      border-color: rgb(229, 231, 235);
    }
    25% {
      border-color: rgb(34, 197, 94);
    }
    50% {
      border-color: rgb(34, 197, 94);
    }
    75% {
      border-color: rgb(34, 197, 94);
    }
    100% {
      border-color: rgb(229, 231, 235);
    }
  }
  
  /* Dark mode success border */
  .dark .success-animation > div {
    animation: successBorderDark 2s ease-in-out;
  }
  
  @keyframes successBorderDark {
    0% {
      border-color: rgb(55, 65, 81);
    }
    25% {
      border-color: rgb(34, 197, 94);
    }
    50% {
      border-color: rgb(34, 197, 94);
    }
    75% {
      border-color: rgb(34, 197, 94);
    }
    100% {
      border-color: rgb(55, 65, 81);
    }
  }
</style>

<script>
  class SimpleChatbot {
    constructor() {
      this.input = document.getElementById('chatbot-input');
      
      this.currentStep = 'inquiry';
      this.formData = {
        inquiry: '',
        name: '',
        email: '',
        phone: ''
      };
      
      this.init();
    }
    
    init() {
      this.input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') this.handleSend();
      });
      
      // Enhanced input interactions
      this.input.addEventListener('focus', () => {
        this.addFocusEffects();
      });
      
      this.input.addEventListener('blur', () => {
        this.removeFocusEffects();
      });
      
      this.input.addEventListener('input', () => {
        this.handleInputChange();
      });
      
      this.updatePlaceholder("What can I help you with?");
    }
    
    addFocusEffects() {
      const container = document.querySelector('.chatbot-container');
      if (container) {
        container.classList.add('focused');
      }
    }
    
    removeFocusEffects() {
      const container = document.querySelector('.chatbot-container');
      if (container) {
        container.classList.remove('focused');
      }
    }
    
    handleInputChange() {
      const sendIcon = document.querySelector('.send-icon');
      if (this.input.value.trim()) {
        if (sendIcon) {
          sendIcon.style.opacity = '1';
          sendIcon.style.transform = 'translateX(0)';
        }
      } else {
        if (sendIcon) {
          sendIcon.style.opacity = '0';
          sendIcon.style.transform = 'translateX(10px)';
        }
      }
    }
    
    updatePlaceholder(text) {
      this.input.placeholder = text;
    }
    
    showBotResponse(text) {
      this.input.value = text;
      this.input.disabled = true;
      
      // Re-enable input after a delay
      setTimeout(() => {
        this.input.disabled = false;
        this.input.value = '';
      }, 2000);
    }
    
    async handleSend() {
      const message = this.input.value.trim();
      if (!message) return;
      
      // Store user input
      if (this.currentStep === 'inquiry') {
        this.formData.inquiry = message;
        this.showBotResponse("Awesome! What's your name?");
        this.currentStep = 'name';
        this.updatePlaceholder("Your name");
      } else if (this.currentStep === 'name') {
        this.formData.name = message;
        this.showBotResponse("What's your email?");
        this.currentStep = 'email';
        this.updatePlaceholder("Your email address");
      } else if (this.currentStep === 'email') {
        this.formData.email = message;
        this.showBotResponse("Phone number? (Optional)");
        this.currentStep = 'phone';
        this.updatePlaceholder("Phone number or 'skip'");
      } else if (this.currentStep === 'phone') {
        if (message.toLowerCase() !== 'skip') {
          this.formData.phone = message;
        }
        this.showBotResponse("Contact via 'whatsapp' or 'email'?");
        this.currentStep = 'contact';
        this.updatePlaceholder("'whatsapp' or 'email'");
      } else if (this.currentStep === 'contact') {
        if (message.toLowerCase().includes('whatsapp')) {
          this.handleWhatsApp();
        } else if (message.toLowerCase().includes('email')) {
          this.handleEmail();
        } else {
            this.showBotResponse("Type 'whatsapp' or 'email'");
            this.updatePlaceholder("'whatsapp' or 'email'");
        }
      }
    }
    
    async handleWhatsApp() {
      this.showBotResponse("Opening WhatsApp...");
      
      // Create WhatsApp message
      const message = `Hi Sattiyan! I'm interested in: ${this.formData.inquiry}%0A%0AMy details:%0AName: ${this.formData.name}%0AEmail: ${this.formData.email}${this.formData.phone ? `%0APhone: ${this.formData.phone}` : ''}`;
      
          // Open WhatsApp with Sattiyan's number
          const whatsappUrl = `https://wa.me/60143072966?text=${message}`;
      window.open(whatsappUrl, '_blank');
      
      setTimeout(() => {
        this.resetForm();
      }, 2000);
    }
    
    async handleEmail() {
      this.showBotResponse("Sending email...");
      
      try {
        // Create form data for FormSubmit.io
        const formData = new FormData();
        formData.append('name', this.formData.name);
        formData.append('email', this.formData.email);
        formData.append('phone', this.formData.phone || 'Not provided');
        formData.append('message', `Inquiry: ${this.formData.inquiry}\n\nName: ${this.formData.name}\nEmail: ${this.formData.email}\nPhone: ${this.formData.phone || 'Not provided'}`);
        formData.append('_subject', 'New Contact from AI Chatbot');
        formData.append('_template', 'table');
        formData.append('_captcha', 'false');
        
        const response = await fetch('https://formsubmit.co/satt.works@gmail.com', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          this.showSuccessAnimation();
        } else {
          throw new Error('Failed to send message');
        }
      } catch (error) {
        console.error('Error sending message:', error);
        this.showBotResponse("❌ Error sending email. Please try WhatsApp instead.");
        setTimeout(() => {
          this.resetForm();
        }, 3000);
      }
    }
    
    showSuccessAnimation() {
      // Show success message with animation
      this.showBotResponse("✅ Email sent successfully!");
      
      // Add success animation to the input container
      const container = document.querySelector('.fixed.bottom-6');
      if (container) {
        container.classList.add('success-animation');
        
        // Remove animation class after animation completes
        setTimeout(() => {
          container.classList.remove('success-animation');
        }, 2000);
      }
      
      // Reset form after showing success
      setTimeout(() => {
        this.resetForm();
      }, 3000);
    }
    
    resetForm() {
      this.currentStep = 'inquiry';
      this.formData = { inquiry: '', name: '', email: '', phone: '' };
      this.input.value = '';
      this.updatePlaceholder("What can I help you with?");
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SimpleChatbot();
  });
</script>
