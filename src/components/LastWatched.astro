---
// Last Watched component - shows the most recent watched item
---

<style>
  @keyframes film-reel {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  @keyframes tv-screen {
    0%, 100% { 
      background: linear-gradient(45deg, #3b82f6, #1d4ed8);
      opacity: 0.8;
    }
    50% { 
      background: linear-gradient(45deg, #1d4ed8, #3b82f6);
      opacity: 1;
    }
  }
  
  @keyframes tv-static {
    0%, 100% { 
      background-image: 
        radial-gradient(circle at 20% 20%, rgba(255,255,255,0.1) 1px, transparent 1px),
        radial-gradient(circle at 80% 80%, rgba(255,255,255,0.1) 1px, transparent 1px);
    }
    50% { 
      background-image: 
        radial-gradient(circle at 60% 40%, rgba(255,255,255,0.2) 1px, transparent 1px),
        radial-gradient(circle at 40% 60%, rgba(255,255,255,0.2) 1px, transparent 1px);
    }
  }
  
  .film-reel {
    animation: film-reel 3s linear infinite;
    transform-origin: center;
  }
  
  .tv-screen {
    animation: tv-screen 2s ease-in-out infinite, tv-static 0.5s linear infinite;
  }
</style>

<div class="animate">
  <div id="last-watched" class="watched-container">
    <div class="flex items-center gap-2 text-xs">
      <!-- Loading skeleton -->
      <div class="animate-pulse flex items-center gap-2">
        <div class="w-3 h-3 bg-gray-200 dark:bg-gray-700 rounded-full"></div>
        <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
      </div>
    </div>
  </div>
  
  <!-- Dropup (hidden by default) - moved outside container -->
</div>

<script>
  async function loadLastWatched() {
    try {
      const response = await fetch('/api/letterboxd');
      const data = await response.json();
      
      const container = document.getElementById('last-watched');
      if (!container) return;
      
      if (!data || !Array.isArray(data) || data.length === 0) {
          container.innerHTML = `
            <div class="inline-flex items-center gap-1.5 px-2.5 py-1 bg-transparent rounded-full text-xs font-medium whitespace-nowrap">
              <div class="w-3 h-3 border-2 border-gray-400 dark:border-gray-500 rounded-full flex items-center justify-center">
                <div class="w-1 h-1 bg-gray-400 dark:bg-gray-500 rounded-full"></div>
              </div>
              <span class="text-gray-500 dark:text-gray-400">No recent watches</span>
            </div>
          `;
          
          // Notify floating bar that data is loaded (even if empty)
          setTimeout(() => {
            if (window.showFloatingBar) {
              window.showFloatingBar();
            }
          }, 100);
          return;
      }
      
      // Get the most recent item (first in the sorted array)
      const lastItem = data[0];
      const watchedDate = new Date(lastItem.watchedDate);
      const timeAgo = getTimeAgo(watchedDate);
      
      
      // Determine icon and color based on type
      const isFilm = lastItem.type === 'film';
      const bgColor = 'bg-gray-50 dark:bg-gray-900';
      const textColor = 'text-gray-700 dark:text-gray-300';
      const dotColor = isFilm ? 'bg-blue-500' : 'bg-purple-500';
      
      // Format title with year
      const title = `${lastItem.title} (${lastItem.year})`;
      
      // Create animated icon based on type
      let animatedIcon;
      if (isFilm) {
        animatedIcon = `
          <div class="relative w-4 h-4 flex items-center justify-center">
            <div class="w-3 h-3 border-2 border-blue-500 rounded-full film-reel relative">
              <!-- Film reel holes -->
              <div class="w-0.5 h-0.5 bg-blue-500 rounded-full absolute top-0.5 left-0.5"></div>
              <div class="w-0.5 h-0.5 bg-blue-500 rounded-full absolute top-0.5 right-0.5"></div>
              <div class="w-0.5 h-0.5 bg-blue-500 rounded-full absolute bottom-0.5 left-0.5"></div>
              <div class="w-0.5 h-0.5 bg-blue-500 rounded-full absolute bottom-0.5 right-0.5"></div>
              <!-- Center hole -->
              <div class="w-1 h-1 bg-blue-500 rounded-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"></div>
            </div>
          </div>
        `;
      } else {
        animatedIcon = `
          <div class="relative w-4 h-4 flex items-center justify-center">
            <div class="w-3 h-2 border border-purple-500 rounded-sm tv-screen relative overflow-hidden">
              <div class="absolute inset-0 bg-purple-500 opacity-20"></div>
            </div>
          </div>
        `;
      }
      
          container.innerHTML = `
            <div class="group inline-flex items-center gap-1.5 px-2.5 py-1.5 bg-transparent rounded-full text-xs font-medium transition-colors duration-200 whitespace-nowrap">
              <div class="flex items-center gap-1">
                ${animatedIcon}
              </div>
              <span class="text-gray-700 dark:text-gray-200 truncate max-w-[70px] sm:max-w-[120px]">${lastItem.title}</span>
              <span class="text-gray-500 dark:text-gray-400 text-xs">${timeAgo}</span>
            </div>
          `;
          
          // Notify floating bar that data is loaded (after content is rendered)
          setTimeout(() => {
            if (window.showFloatingBar) {
              window.showFloatingBar();
            }
          }, 100);
          
    } catch (error) {
      console.error('Error loading last watched:', error);
      const container = document.getElementById('last-watched');
      if (container) {
        container.innerHTML = `
          <div class="inline-flex items-center gap-1.5 px-2.5 py-1 bg-red-50 dark:bg-red-900/20 rounded-full text-xs font-medium whitespace-nowrap">
            <div class="w-3 h-3 border-2 border-red-400 dark:border-red-500 rounded-full flex items-center justify-center">
              <div class="w-1 h-1 bg-red-400 dark:bg-red-500 rounded-full"></div>
            </div>
            <span class="text-red-700 dark:text-red-300">Unable to load</span>
          </div>
        `;
        
        // Notify floating bar that data is loaded (even if error)
        setTimeout(() => {
          if (window.showFloatingBar) {
            window.showFloatingBar();
          }
        }, 100);
      }
    }
  }
  
  function getTimeAgo(date: Date): string {
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
    
    if (diffInSeconds < 60) return 'just now';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`;
    if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 604800)}w ago`;
    return `${Math.floor(diffInSeconds / 2592000)}mo ago`;
  }
  
  // Load last watched data when the component is visible
  document.addEventListener('DOMContentLoaded', () => {
    loadLastWatched();
  });
  
  // Refresh every 5 minutes (less frequent than Spotify since watched data changes less often)
  setInterval(loadLastWatched, 300000);
  
  // Refresh when page becomes visible
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      loadLastWatched();
    }
  });
</script>
